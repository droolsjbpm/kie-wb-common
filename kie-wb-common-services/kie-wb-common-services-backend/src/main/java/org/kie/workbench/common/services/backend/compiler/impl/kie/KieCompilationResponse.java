/*
 * Copyright 2017 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.kie.workbench.common.services.backend.compiler.impl.kie;

import java.net.URI;
import java.net.URL;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import org.drools.core.rule.KieModuleMetaInfo;
import org.kie.api.builder.KieModule;
import org.kie.workbench.common.services.backend.compiler.CompilationResponse;
import org.uberfire.java.nio.file.Path;

/**
 * Compilation response with benefits of Kie
 */
public interface KieCompilationResponse extends CompilationResponse {

    /**
     * Provides the list of all dependencies used by the project, included transitive
     */
    Optional<List<URI>> getProjectDependenciesAsURI();

    /**
     * Provides the list of all dependencies used by the project, included transitive
     */
    Optional<List<URL>> getProjectDependenciesAsURL();

    /**
     * Provides a KieModuleMetaInfo if a kie maven plugin is used in the project
     */
    Optional<KieModuleMetaInfo> getKieModuleMetaInfo();

    /**
     * Provides a KieModule if a kie maven plugin is used in the project
     */
    Optional<KieModule> getKieModule();

    /**
     * Provides a Map with all the classes loaded and generated by Drools
     * @return
     */
    Optional<Map<String, byte[]>> getProjectClassLoaderStore();

    /**
     * Provides the Path of the working dir
     * @return
     */
    Optional<Path> getWorkingDir();

    /**
     * Provides the List of project dependencies from target folders as List of String
     * @return
     */
    Optional<List<String>> getProjectDependenciesRaw();

    /**
     * Provides the List of classes annotated in the drl files with Event
     * */
    Optional<Set<String>> getEventTypeClasses();
}
