/*
 * Copyright 2015 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.kie.workbench.common.screens.datamodeller.backend.server;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.inject.Named;

import org.guvnor.common.services.shared.metadata.model.Metadata;
import org.guvnor.common.services.shared.metadata.model.Overview;
import org.jboss.errai.bus.server.annotations.Service;
import org.kie.workbench.common.screens.datamodeller.model.persistence.PersistenceDescriptorEditorContent;
import org.kie.workbench.common.screens.datamodeller.model.persistence.PersistenceDescriptorModel;
import org.kie.workbench.common.screens.datamodeller.service.PersistenceDescriptorEditorService;
import org.kie.workbench.common.screens.datamodeller.service.PersistenceDescriptorService;
import org.kie.workbench.common.services.backend.service.KieService;
import org.uberfire.backend.server.util.Paths;
import org.uberfire.backend.vfs.Path;
import org.uberfire.io.IOService;

@Service
@ApplicationScoped
public class PersistenceDescriptorEditorServiceImpl
        extends KieService<PersistenceDescriptorEditorContent>
        implements PersistenceDescriptorEditorService {

    @Inject
    @Named("ioStrategy")
    IOService ioService;

    @Inject
    PersistenceDescriptorService descriptorService;

    public PersistenceDescriptorEditorServiceImpl() {
    }

    @Override
    public PersistenceDescriptorEditorContent loadContent( Path path, boolean createIfNotExists ) {
        if ( createIfNotExists ) {
            //was called manually form the project editor
            loadContent( createIfNotExists( path ) );
        }
        return loadContent( path );
    }

    @Override
    protected PersistenceDescriptorEditorContent constructContent( Path path, Overview overview ) {

        PersistenceDescriptorEditorContent content = new PersistenceDescriptorEditorContent();
        PersistenceDescriptorModel descriptorModel = descriptorService.load( path );
        content.setDescriptorModel( descriptorModel );
        content.setOverview( overview );
        content.setSource( ioService.readAllString( Paths.convert( path ) ) );

        return content;
    }

    @Override
    public Path save( Path path, PersistenceDescriptorEditorContent content, Metadata metadata, String comment ) {

        if ( content != null && content.getDescriptorModel() != null ) {
            descriptorService.save( path, content.getDescriptorModel(), metadata, comment );
        }
        return path;
    }

    @Override
    public Path createIfNotExists( Path path ) {
        if ( ioService.notExists( Paths.convert( path ) ) ) {
            PersistenceDescriptorModel descriptorModel = descriptorService.createProjectDefaultDescriptor( path );
            return descriptorService.save( path, descriptorModel, null, "Default descriptor generated by system" );
        } else {
            //workaround to add hasVersionSupport property to the received path, in case the FS supports versioning.
            //When the path was created manually it doesn't have the property.
            return Paths.convert( Paths.convert( path ) );
        }
    }

}
